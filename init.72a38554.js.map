{"version":3,"sources":["constants.js","buttons.js","helpers/ui.js","gameState.js","init.js"],"names":["ICONS","exports","TICK_RATE","RAIN_CHANCE","SCENES","DAY_LENGTH","NIGHT_LENGTH","getNextHungerTime","clock","Math","floor","random","getNextDieTime","getNextPoopTime","_constants","require","toggleHighlighted","icon","show","document","querySelector","classList","toggle","initButtons","handleUserAction","selectedIcon","addEventListener","event","target","contains","length","modFox","state","className","modScene","togglePoopBag","writeModal","text","innerHTML","_ui","gameState","current","wakeTime","sleepTime","hungryTime","dieTime","timeToStartCelebrating","timeToEndCelebrating","poopTime","tick","console","log","wake","sleep","getHungry","die","startCelebrating","endCelebrating","poop","clearTimes","startGame","scene","determineFoxState","changeWeather","cleanUpPoop","feed","action","includes","bind","_default","default","_buttons","_interopRequireDefault","_gameState","_interopRequireWildcard","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","obj","init","nextTimeToTick","Date","now","requestAnimationFrame","nextAnimationFrame"],"mappings":"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","file":"init.72a38554.js","sourceRoot":"../src","sourcesContent":["export const ICONS = ['fish', 'poop', 'weather'];\nexport const TICK_RATE = 1000;\nexport const RAIN_CHANCE = 0.2;\nexport const SCENES = ['day', 'rain'];\nexport const DAY_LENGTH = 60;\nexport const NIGHT_LENGTH = 4;\n\nexport const getNextHungerTime = (clock) =>\n  Math.floor(Math.random() * 3) + 5 + clock;\nexport const getNextDieTime = (clock) =>\n  Math.floor(Math.random() * 3) + 3 + clock;\nexport const getNextPoopTime = (clock) =>\n  Math.floor(Math.random() * 3) + 4 + clock;\n","import { ICONS } from './constants';\n\nfunction toggleHighlighted(icon, show) {\n  document\n    .querySelector(`.${ICONS[icon]}-icon`)\n    .classList.toggle('highlighted', show);\n}\n\nexport default function initButtons(handleUserAction) {\n  let selectedIcon = 0;\n\n  function buttonClick(event) {\n    if (event.target.classList.contains('left-btn')) {\n      toggleHighlighted(selectedIcon, false);\n      selectedIcon = (2 + selectedIcon) % ICONS.length;\n      toggleHighlighted(selectedIcon, true);\n    } else if (event.target.classList.contains('right-btn')) {\n      toggleHighlighted(selectedIcon, false);\n      selectedIcon = (1 + selectedIcon) % ICONS.length;\n      toggleHighlighted(selectedIcon, true);\n    } else {\n      handleUserAction(ICONS[selectedIcon]);\n    }\n  }\n\n  document.querySelector('.buttons').addEventListener('click', buttonClick);\n}\n","export const modFox = function modFox(state) {\n  document.querySelector('.fox').className = `fox fox-${state}`;\n};\n\nexport const modScene = function modScene(state) {\n  document.querySelector('.game').className = `game ${state}`;\n};\n\nexport const togglePoopBag = function togglePoopBag(show) {\n  document.querySelector('.poop-bag').classList.toggle('hidden', !show);\n};\n\nexport const writeModal = function writeModal(text = '') {\n  document.querySelector('.modal').innerHTML =\n    `<div class=\"modal-inner\">${text}</div>`;\n};\n","import {\n  DAY_LENGTH,\n  NIGHT_LENGTH,\n  RAIN_CHANCE,\n  SCENES,\n  getNextDieTime,\n  getNextHungerTime,\n  getNextPoopTime,\n} from './constants';\nimport { modFox, modScene, togglePoopBag, writeModal } from './helpers/ui';\n\nconst gameState = {\n  current: 'INIT',\n  clock: 1,\n  wakeTime: -1,\n  sleepTime: -1,\n  hungryTime: -1,\n  dieTime: -1,\n  timeToStartCelebrating: -1,\n  timeToEndCelebrating: -1,\n  poopTime: -1,\n  tick() {\n    this.clock++;\n    console.log('clock', this.clock);\n    if (this.clock === this.wakeTime) {\n      this.wake();\n    } else if (this.clock === this.sleepTime) {\n      this.sleep();\n    } else if (this.clock === this.hungryTime) {\n      this.getHungry();\n    } else if (this.clock === this.dieTime) {\n      this.die();\n    } else if (this.clock === this.timeToStartCelebrating) {\n      this.startCelebrating();\n    } else if (this.clock === this.timeToEndCelebrating) {\n      this.endCelebrating();\n    } else if (this.clock === this.poopTime) {\n      this.poop();\n    }\n    return this.clock;\n  },\n  clearTimes() {\n    this.wakeTime = -1;\n    this.sleepTime = -1;\n    this.hungryTime = -1;\n    this.dieTime = -1;\n    this.poopTime = -1;\n    this.timeToEndCelebrating = -1;\n    this.timeToStartCelebrating = -1;\n  },\n  startGame() {\n    this.current = 'HATCHING';\n    this.wakeTime = this.clock + 3;\n    modFox('egg');\n    modScene('day');\n    writeModal();\n  },\n  wake() {\n    console.log('awaken');\n    this.current = 'IDLING';\n    this.wakeTime = -1;\n    this.scene = Math.random() > RAIN_CHANCE ? 0 : 1;\n    modScene(SCENES[this.scene]);\n    this.sleepTime = this.clock + DAY_LENGTH;\n    this.hungryTime = getNextHungerTime(this.clock);\n    this.determineFoxState();\n  },\n  sleep() {\n    this.state = 'SLEEP';\n    modFox('sleep');\n    modScene('night');\n    this.clearTimes();\n    this.wakeTime = this.clock + NIGHT_LENGTH;\n  },\n  getHungry() {\n    this.current = 'HUNGRY';\n    this.dieTime = getNextDieTime(this.clock);\n    this.hungryTime = -1;\n    modFox('hungry');\n  },\n  poop() {\n    this.current = 'POOPING';\n    this.poopTime = -1;\n    this.dieTime = getNextDieTime();\n    modFox('pooping');\n  },\n  die() {\n    this.current = 'DEAD';\n    modScene('dead');\n    modFox('dead');\n    this.clearTimes();\n    writeModal('The fox died ;( <br /> Press the middle button to start');\n  },\n  changeWeather() {\n    this.scene = (this.scene + 1) % SCENES.length;\n    modScene(SCENES[this.scene]);\n  },\n  cleanUpPoop() {\n    if (this.current !== 'POOPING') return;\n    this.dieTime = -1;\n    togglePoopBag(true);\n    this.startCelebrating();\n    this.hungryTime = getNextHungerTime(this.clock);\n  },\n  feed() {\n    if (this.current !== 'HUNGRY') return;\n\n    this.current = 'FEEDING';\n    this.dieTime = -1;\n    this.poopTime = getNextPoopTime(this.clock);\n    modFox('eating');\n    this.timeToStartCelebrating = this.clock + 2;\n  },\n  startCelebrating() {\n    this.current = 'CELEBRATING';\n    modFox('celebrate');\n    this.timeToEndCelebrating = this.clock + 2;\n    this.timeToStartCelebrating = -1;\n  },\n  endCelebrating() {\n    this.timeToEndCelebrating = -1;\n    this.current = 'IDLING';\n    this.determineFoxState();\n    togglePoopBag(false);\n  },\n  determineFoxState() {\n    if (this.current === 'IDLING') {\n      if (SCENES[this.scene] === 'rain') {\n        modFox('rain');\n      } else {\n        modFox('idling');\n      }\n    }\n  },\n  handleUserAction(action) {\n    if (['SLEEP', 'FEEDING', 'CELEBRATING'].includes(this.current)) return;\n    if (['INIT', 'DEAD'].includes(this.current)) {\n      this.startGame();\n      return;\n    }\n\n    switch (action) {\n      case 'weather':\n        this.changeWeather();\n        break;\n      case 'poop':\n        this.cleanUpPoop();\n        break;\n      case 'fish':\n        this.feed();\n        break;\n    }\n  },\n};\n\nexport const handleUserAction = gameState.handleUserAction.bind(gameState);\nexport default gameState;\n","import initButtons from './buttons';\nimport { TICK_RATE } from './constants';\nimport gameState, { handleUserAction } from './gameState';\n\nasync function init() {\n  console.log('starting game');\n  initButtons(handleUserAction);\n\n  let nextTimeToTick = Date.now();\n\n  function nextAnimationFrame() {\n    const now = Date.now();\n\n    if (nextTimeToTick <= now) {\n      gameState.tick();\n      nextTimeToTick = now + TICK_RATE;\n    }\n\n    requestAnimationFrame(nextAnimationFrame);\n  }\n\n  requestAnimationFrame(nextAnimationFrame);\n}\n\ninit();\n"]}